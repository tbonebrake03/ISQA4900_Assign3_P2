{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport router from '../router';\nimport { APIService } from '../http/APIService';\nconst apiService = new APIService();\nexport default {\n  name: \"CustomerList\",\n  data: () => ({\n    customers: [],\n    validUserName: \"Guest\",\n    customerSize: 0,\n    showMsg: '',\n    isMobile: false,\n    authenticated: false,\n    headers: [{\n      text: 'Customer Number',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Name',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Address',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'City',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'State',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'ZipCode',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Email',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Phone',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Update',\n      sortable: false,\n      align: 'left'\n    }, {\n      text: 'Delete',\n      sortable: false,\n      align: 'left'\n    }]\n  }),\n  mounted() {\n    this.authenticated = localStorage.getItem(\"isAuthenticated\");\n    this.getCustomers();\n    this.showMessages();\n  },\n  methods: {\n    onResize() {\n      if (window.innerWidth > 600) this.isMobile = false;else this.isMobile = true;\n    },\n    showMessages() {\n      if (this.$route.params.msg) {\n        this.showMsg = this.$route.params.msg;\n      }\n    },\n    getCustomers() {\n      apiService.getCustomerList().then(response => {\n        this.customers = response.data.data;\n        this.customerSize = this.customers.length;\n        if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n          this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\n        }\n      }).catch(error => {\n        if (error.response.status === 401) {\n          localStorage.clear();\n          router.push(\"/auth\");\n        }\n      });\n    },\n    addNewCustomer() {\n      if (localStorage.getItem(\"isAuthenticated\") && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n        router.push('/customer-create');\n      } else {\n        router.push(\"/auth\");\n      }\n    },\n    updateCustomer(customer) {\n      router.push('/customer-create/' + customer.pk);\n    },\n    deleteCustomer(customer) {\n      if (confirm(\"Do you really want to delete?\")) {\n        apiService.deleteCustomer(customer.pk).then(response => {\n          if (response.status === 204) {\n            router.push('/customer-list/deleted/');\n            this.getCustomers();\n          }\n        }).catch(error => {\n          if (error.response.status === 401) {\n            localStorage.clear();\n            router.push(\"/auth\");\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["router","APIService","apiService","name","data","customers","validUserName","customerSize","showMsg","isMobile","authenticated","headers","text","sortable","align","mounted","localStorage","getItem","getCustomers","showMessages","methods","onResize","window","innerWidth","$route","params","msg","getCustomerList","then","response","length","JSON","parse","catch","error","status","clear","push","addNewCustomer","updateCustomer","customer","pk","deleteCustomer","confirm"],"sources":["/Users/tbonebrake/Desktop/FullStackDevelopment/investments/investments-fe/src/components/CustomerList.vue"],"sourcesContent":["<template>\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center justify-content-center\">\n            <div class=\"col col-12 align-items-center justify-content-center\">\n                <blockquote>\n                    Welcome {{ validUserName }}!\n                    <footer>\n                        <small>\n                            <em>&mdash;Financial Services, your Midwest Financial Services Partner.</em>\n                        </small>\n                    </footer>\n                </blockquote>\n            </div>\n            <div class=\"col-12 col-md-10 col-lg-10 col-12 align-items-center justify-content-center\">\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'new'\"\n                     :value=\"true\">\n                    New customer has been added.\n                </div>\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'update'\"\n                     :value=\"true\">\n                    Customer information has been updated.\n                </div>\n                <div class=\"alert alert-success\"\n                     v-if=\"showMsg === 'deleted'\"\n                     :value=\"true\">\n                    Selected customer has been deleted.\n                </div>\n            </div>\n        </div>\n        <!--Mobile device view-->\n        <div class=\"d-md-none\" id=\"collapsable-card\" style=\"width: 80%\">\n                <button type=\"button\" class=\"btn btn-primary\" @click=\"addNewCustomer\">\n                    <font-awesome-icon icon=\"plus\"/>\n                </button>\n                <div class=\"card\" v-for=\"customer in customers\" v-bind:key=\"customer\">\n                    <div class=\"card-header\" :id=\"'heading' + customer.cust_number\">\n                        <button class=\"btn btn-link collapsed\" data-bs-toggle=\"collapse\" :data-bs-target=\"'#collapse' + customer.pk\" \n                        aria-expanded=\"true\" :aria-controls=\"'collapse' + customer.pk\">\n                            <h6 style=\"color: #0275d8; float: left\">{{customer.name}}</h6>\n                        </button>\n                    </div>\n\n                    <div :id=\"'collapse' + customer.pk\" class=\"collapse\" :aria-labelledby=\"'heading' + customer.pk\" data-bs-parent=\"#collapsable-card\">\n                        <div class=\"card-body\">\n                            <p><b>Name:</b> {{customer.name}}</p>\n                            <p><b>Customer Number:</b>{{ customer.cust_number }}</p>\n                            <p><b>Address:</b> {{customer.address}},{{ customer.city }},\n                            {{ customer.state }}, {{ customer.zipcode }}</p>\n                            <p><b>Email:</b> {{customer.email}}</p>\n                            <p><b>Phone:</b> {{customer.cell_phone}}</p>\n                            <p><b>Agent:</b> {{customer.agent}}</p>\n                            <div class=\"btn-group\">\n                            <button @click=\"updateCustomer(customer)\" style=\"background-color: transparent; padding: 5;\">\n                                <font-awesome-icon icon=\"pencil\"/></button>\n                            <button @click=\"deleteCustomer(customer)\" style=\"background-color: transparent; padding: 5;\">\n                                <font-awesome-icon icon=\"trash\"/></button>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!--non-Mobile device view-->\n\n            <div class=\"col col-12 col-md-10 d-none d-xl-block d-lg-block d-md-block\">\n                <table class=\"table table-hover\" style=\"overflow-y: auto\"\n                       :headers=\"headers\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Customer #</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Address</th>\n                        <th scope=\"col\">City</th>\n                        <th scope=\"col\">State</th>\n                        <th scope=\"col\">Zip Code</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Phone</th>\n                        <th scope=\"col\">Update</th>\n                        <th scope=\"col\">Delete</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr v-for = \"customer in customers\" v-bind:key=\"customer\">\n                        <th scope=\"row\">{{customer.cust_number}}</th>\n                        <td>{{customer.name}}</td>\n                        <td>{{customer.address}}</td>\n                        <td>{{customer.city}}</td>\n                        <td>{{customer.state}}</td>\n                        <td>{{customer.zipcode}}</td>\n                        <td>{{customer.email}}</td>\n                        <td>{{customer.cell_phone}}</td>\n                        <td v-if=\"this.authenticated === 'true'\" @click=\"updateCustomer(customer)\"><button style=\"background-color: transparent; padding: 0;\">\n                            <font-awesome-icon icon=\"pencil\"/></button>\n                        </td>\n                        <td v-if=\"this.authenticated === 'true'\"  @click=\"deleteCustomer(customer)\"><button style=\"background-color: transparent; padding: 0;\">\n                            <font-awesome-icon icon=\"trash\"/></button>\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <!-- Only allow add of customer when authenticated user -->\n                <div v-if=\"this.authenticated === 'true'\">\n                    <button type=\"button\" class=\"btn btn-primary\" @click=\"addNewCustomer\">Add New Customer</button>\n                </div>\n            </div>\n        </div>\n</template>\n<script>\n    import router from '../router';\n    import {APIService} from '../http/APIService';\n    const apiService = new APIService();\n\n    export default {\n        name: \"CustomerList\",\n        data: () => ({\n            customers: [],\n            validUserName: \"Guest\",\n            customerSize: 0,\n            showMsg: '',\n            isMobile: false,\n            authenticated: false,\n            headers: [\n                {text: 'Customer Number', sortable: false, align: 'left',},\n                {text: 'Name', sortable: false, align: 'left',},\n                {text: 'Address', sortable: false, align: 'left',},\n                {text: 'City', sortable: false, align: 'left',},\n                {text: 'State', sortable: false, align: 'left',},\n                {text: 'ZipCode', sortable: false, align: 'left',},\n                {text: 'Email', sortable: false, align: 'left',},\n                {text: 'Phone', sortable: false, align: 'left',},\n                {text: 'Update', sortable: false, align: 'left',},\n                {text: 'Delete', sortable: false, align: 'left',}\n            ],\n        }),\n        mounted() {\n            this.authenticated = localStorage.getItem(\"isAuthenticated\")\n            this.getCustomers();\n            this.showMessages();\n        },\n        methods: {\n            onResize() {\n                if (window.innerWidth > 600)\n                    this.isMobile = false;\n                else\n                    this.isMobile = true;\n            },\n            showMessages(){\n                if (this.$route.params.msg) {\n                    this.showMsg = this.$route.params.msg;\n                }\n            },\n            getCustomers() {\n                apiService.getCustomerList().then(response => {\n                    this.customers = response.data.data;\n                    this.customerSize = this.customers.length;\n                    if (localStorage.getItem(\"isAuthenticated\")\n                        && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n                        this.validUserName = JSON.parse(localStorage.getItem(\"log_user\"));\n                    }\n                }).catch(error => {\n                    if (error.response.status === 401) {\n                        localStorage.clear();\n                        router.push(\"/auth\");\n                    }\n                });\n            },\n            addNewCustomer() {\n                if (localStorage.getItem(\"isAuthenticated\")\n                    && JSON.parse(localStorage.getItem(\"isAuthenticated\")) === true) {\n                    router.push('/customer-create');\n                } else {\n                    router.push(\"/auth\");\n                }\n            },\n            updateCustomer(customer) {\n                router.push('/customer-create/' + customer.pk);\n            },\n            deleteCustomer(customer) {\n                if(confirm(\"Do you really want to delete?\")) {\n                    apiService.deleteCustomer(customer.pk).then(response => {\n                        if (response.status === 204) {\n                            router.push('/customer-list/deleted/')\n                            this.getCustomers()\n                        }\n                    }).catch(error => {\n                        if (error.response.status === 401) {\n                            localStorage.clear();\n                            router.push(\"/auth\");\n                        }\n                    });\n                }\n            }\n        }\n    };\n</script>\n<style>\n    button {\n        padding: 1rem;\n        border: 0;\n        cursor: pointer;\n    }\n</style>\n"],"mappings":";AA6GI,OAAOA,MAAK,MAAO,WAAW;AAC9B,SAAQC,UAAU,QAAO,oBAAoB;AAC7C,MAAMC,UAAS,GAAI,IAAID,UAAU,CAAC,CAAC;AAEnC,eAAe;EACXE,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAEA,CAAA,MAAO;IACTC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE,OAAO;IACtBC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,KAAK;IACfC,aAAa,EAAE,KAAK;IACpBC,OAAO,EAAE,CACL;MAACC,IAAI,EAAE,iBAAiB;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC1D;MAACF,IAAI,EAAE,MAAM;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/C;MAACF,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAClD;MAACF,IAAI,EAAE,MAAM;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/C;MAACF,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAChD;MAACF,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAClD;MAACF,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAChD;MAACF,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAChD;MAACF,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EACjD;MAACF,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO;EAExD,CAAC,CAAC;EACFC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACL,aAAY,GAAIM,YAAY,CAACC,OAAO,CAAC,iBAAiB;IAC3D,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,YAAY,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACLC,QAAQA,CAAA,EAAG;MACP,IAAIC,MAAM,CAACC,UAAS,GAAI,GAAG,EACvB,IAAI,CAACd,QAAO,GAAI,KAAK,MAErB,IAAI,CAACA,QAAO,GAAI,IAAI;IAC5B,CAAC;IACDU,YAAYA,CAAA,EAAE;MACV,IAAI,IAAI,CAACK,MAAM,CAACC,MAAM,CAACC,GAAG,EAAE;QACxB,IAAI,CAAClB,OAAM,GAAI,IAAI,CAACgB,MAAM,CAACC,MAAM,CAACC,GAAG;MACzC;IACJ,CAAC;IACDR,YAAYA,CAAA,EAAG;MACXhB,UAAU,CAACyB,eAAe,CAAC,CAAC,CAACC,IAAI,CAACC,QAAO,IAAK;QAC1C,IAAI,CAACxB,SAAQ,GAAIwB,QAAQ,CAACzB,IAAI,CAACA,IAAI;QACnC,IAAI,CAACG,YAAW,GAAI,IAAI,CAACF,SAAS,CAACyB,MAAM;QACzC,IAAId,YAAY,CAACC,OAAO,CAAC,iBAAiB,KACnCc,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAI,EAAE;UACjE,IAAI,CAACX,aAAY,GAAIyB,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;QACrE;MACJ,CAAC,CAAC,CAACgB,KAAK,CAACC,KAAI,IAAK;QACd,IAAIA,KAAK,CAACL,QAAQ,CAACM,MAAK,KAAM,GAAG,EAAE;UAC/BnB,YAAY,CAACoB,KAAK,CAAC,CAAC;UACpBpC,MAAM,CAACqC,IAAI,CAAC,OAAO,CAAC;QACxB;MACJ,CAAC,CAAC;IACN,CAAC;IACDC,cAAcA,CAAA,EAAG;MACb,IAAItB,YAAY,CAACC,OAAO,CAAC,iBAAiB,KACnCc,IAAI,CAACC,KAAK,CAAChB,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,MAAM,IAAI,EAAE;QACjEjB,MAAM,CAACqC,IAAI,CAAC,kBAAkB,CAAC;MACnC,OAAO;QACHrC,MAAM,CAACqC,IAAI,CAAC,OAAO,CAAC;MACxB;IACJ,CAAC;IACDE,cAAcA,CAACC,QAAQ,EAAE;MACrBxC,MAAM,CAACqC,IAAI,CAAC,mBAAkB,GAAIG,QAAQ,CAACC,EAAE,CAAC;IAClD,CAAC;IACDC,cAAcA,CAACF,QAAQ,EAAE;MACrB,IAAGG,OAAO,CAAC,+BAA+B,CAAC,EAAE;QACzCzC,UAAU,CAACwC,cAAc,CAACF,QAAQ,CAACC,EAAE,CAAC,CAACb,IAAI,CAACC,QAAO,IAAK;UACpD,IAAIA,QAAQ,CAACM,MAAK,KAAM,GAAG,EAAE;YACzBnC,MAAM,CAACqC,IAAI,CAAC,yBAAyB;YACrC,IAAI,CAACnB,YAAY,CAAC;UACtB;QACJ,CAAC,CAAC,CAACe,KAAK,CAACC,KAAI,IAAK;UACd,IAAIA,KAAK,CAACL,QAAQ,CAACM,MAAK,KAAM,GAAG,EAAE;YAC/BnB,YAAY,CAACoB,KAAK,CAAC,CAAC;YACpBpC,MAAM,CAACqC,IAAI,CAAC,OAAO,CAAC;UACxB;QACJ,CAAC,CAAC;MACN;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}